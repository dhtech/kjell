#!/usr/bin/env python3.6
# Produces a socket connection to a user's shell server or provisions one
# if there is none.
# Usage: $0 <server_template.yml>
import os
import subprocess
import sys

TOKEN_FILE = '/run/secrets/kubernetes.io/serviceaccount/token'


def main(template):
    user = os.environ['USER'])
    with open(TOKEN_FILE, 'r') as f:
        token = f.read()

def list_shells(token):
    # TOOD
    pass


def provision(template, user):
    with open(template, 'r') as f:
        template = f.read()

    kubectl = subprocess.Popen(
            ['kubectl', 'apply', '-f', '-'],
            stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    config = template.format(user=user)
    (out, err) = kubectl.communicate(config.encode())
    if err:
        print('Unable to provision shell, sorry :(')
        sys.exit(1)
    print(out.decode())


if __name__ == '__main__':
    main(sys.argv[1])
